"use client";

import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { 
  Calendar, 
  MapPin, 
  Users, 
  DollarSign, 
  Clock, 
  Camera, 
  Music, 
  Utensils,
  Palette,
  Shield,
  Mic,
  Plus,
  X,
  Save,
  Eye,
  Edit,
  Trash2,
  Upload,
  CheckCircle,
  BarChart3,
  TrendingUp,
  AlertCircle,
  Filter,
  Search,
  Grid,
  List,
  CalendarDays,
  Target,
  Activity
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { AppSidebar } from "@/components/app-sidebar";
import { SiteHeader } from "@/components/site-header";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";
import { plannerApi, eventsApi } from "@/lib/api";
import { EventCard } from "@/components/ui/event-card";
import { useAuth } from "@/hooks/use-auth-firebase";
import { useRouter } from "next/navigation";
import { toast } from "sonner";

// Force dynamic rendering to prevent static generation errors
export const dynamic = 'force-dynamic';

interface Event {
  id: string;
  title: string;
  description: string;
  eventType: string;
  startDate: string;
  endDate: string;
  location: string;
  address?: string;
  budget?: number;
  currency: string;
  status: string;
  isPublic: boolean;
  images?: string[];
  requiredRoles?: string[];
  tags?: string[];
  maxApplicants?: number;
  requirements?: string;
  deadlineDate?: string;
  _count: {
    event_applications: number;
    bookings: number;
  };
}

interface EventFormData {
  title: string;
  description: string;
  eventType: string;
  startDate: string;
  endDate: string;
  location: string;
  address?: string;
  budget?: number;
  currency: string;
  requiredRoles: string[];
  tags: string[];
  maxApplicants?: number;
  isPublic: boolean;
  requirements?: string;
  deadlineDate?: string;
  images?: string[];
}

const eventTypes = [
  "WEDDING", "CORPORATE", "BIRTHDAY", "CONCERT", "CONFERENCE", "OTHER"
];

const professionalCategories = [
  { id: "PHOTOGRAPHY", label: "Photographer", icon: Camera },
  { id: "VIDEOGRAPHY", label: "Videographer", icon: Camera },
  { id: "DJ", label: "DJ/Music", icon: Music },
  { id: "MC", label: "MC/Host", icon: Mic },
  { id: "DECORATION", label: "Decorator", icon: Palette },
  { id: "CATERING", label: "Caterer", icon: Utensils },
  { id: "SECURITY", label: "Security", icon: Shield },
];

export default function ManageEventsPage() {
  const { user, loading: authLoading } = useAuth();
  const router = useRouter();
  const [activeTab, setActiveTab] = useState("overview");
  const [events, setEvents] = useState<Event[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [editingEvent, setEditingEvent] = useState<Event | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [statusFilter, setStatusFilter] = useState("ALL");
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [selectedImages, setSelectedImages] = useState<File[]>([]);
  const [imageUrls, setImageUrls] = useState<string[]>([]);
  const [uploadingImages, setUploadingImages] = useState(false);

  // Form state for creating/editing events
  const [formData, setFormData] = useState<EventFormData>({
    title: "",
    description: "",
    eventType: "",
    startDate: "",
    endDate: "",
    location: "",
    address: "",
    budget: 0,
    currency: "USD",
    requiredRoles: [],
    tags: [],
    maxApplicants: 0,
    isPublic: true,
    requirements: "",
    deadlineDate: "",
    images: [],
  });

  // Calendar and detailed view state
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [currentDate, setCurrentDate] = useState(new Date());
  const [calendarView, setCalendarView] = useState<'month' | 'week' | 'day'>('month');

  // Dashboard stats
  const [stats, setStats] = useState<{
    totalEvents: number;
    activeEvents: number;
    totalApplications: number;
    pendingApplications: number;
    totalBudget: number;
    avgRating: number;
  }>({
    totalEvents: 0,
    activeEvents: 0,
    totalApplications: 0,
    pendingApplications: 0,
    totalBudget: 0,
    avgRating: 0
  });

  useEffect(() => {
    if (authLoading) return;

    if (!user) {
      router.push('/signin');
      return;
    }
  }, [user, authLoading, router]);

  useEffect(() => {
    if (user) {
      fetchEvents();
      fetchStats();
    }
  }, [user]);

  const fetchEvents = async () => {
    try {
      setLoading(true);
      const response = await plannerApi.getMyEvents();
      setEvents(response.events || []);
      setError(null);
    } catch (err: any) {
      console.error('Error fetching events:', err);
      const errorMessage = 'Failed to load your events. Please try again.';
      setError(errorMessage);
      
      // Show error toast for initial load failures
      toast.error('Failed to load events', {
        description: 'Unable to fetch your events. Please check your connection and try again.',
        duration: 5000,
      });
    } finally {
      setLoading(false);
    }
  };

  const fetchStats = async () => {
    try {
      if (user?.username) {
        const response = await plannerApi.getDashboardStats(user.username);
        setStats({
          totalEvents: Number(response.totalEvents) || 0,
          activeEvents: Number(response.activeEvents) || 0,
          totalApplications: Number(response.totalApplications) || 0,
          pendingApplications: Number(response.pendingApplications) || 0,
          totalBudget: Number(response.totalBudget) || 0,
          avgRating: Number(response.avgRating) || 0
        });
      }
    } catch (err) {
      console.error('Error fetching stats:', err);
    }
  };

  const resetForm = () => {
    setFormData({
      title: "",
      description: "",
      eventType: "",
      startDate: "",
      endDate: "",
      location: "",
      address: "",
      budget: 0,
      currency: "USD",
      requiredRoles: [],
      tags: [],
      maxApplicants: 0,
      isPublic: true,
      requirements: "",
      deadlineDate: "",
      images: [],
    });
    setSelectedImages([]);
    setImageUrls([]);
    setUploadingImages(false);
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    if (files.length === 0) return;

    setSelectedImages(prev => [...prev, ...files]);

    // Create preview URLs for new uploads only (don't mix with existing images)
    files.forEach(file => {
      const reader = new FileReader();
      reader.onload = (e) => {
        if (e.target?.result) {
          setImageUrls(prev => [...prev, e.target!.result as string]);
        }
      };
      reader.readAsDataURL(file);
    });
  };

  const removeImage = (index: number) => {
    const existingImagesCount = formData.images?.length || 0;
    
    if (index < existingImagesCount) {
      // Removing an existing saved image
      setFormData(prev => ({
        ...prev,
        images: prev.images?.filter((_, i) => i !== index) || []
      }));
    } else {
      // Removing a newly uploaded image
      const newImageIndex = index - existingImagesCount;
      setSelectedImages(prev => prev.filter((_, i) => i !== newImageIndex));
    }
    
    // Remove from preview URLs
    setImageUrls(prev => prev.filter((_, i) => i !== index));
  };

  const uploadImages = async (files: File[]): Promise<string[]> => {
    if (files.length === 0) return [];

    setUploadingImages(true);
    const uploadedUrls: string[] = [];

    try {
      // Check file sizes before processing
      const maxSize = 10 * 1024 * 1024; // 10MB per file (Cloudinary can handle this)
      const oversizedFiles = files.filter(file => file.size > maxSize);
      
      if (oversizedFiles.length > 0) {
        toast.error('File size too large', {
          description: `Some images are larger than 10MB. Please compress them and try again.`,
          duration: 5000,
        });
        return [];
      }

      // Get Firebase auth token for backend API
      const { getAuth } = await import('firebase/auth');
      const auth = getAuth();
      const firebaseUser = auth.currentUser;
      
      if (!firebaseUser) {
        toast.error('Authentication required', {
          description: 'Please log in to upload images.',
          duration: 4000,
        });
        return [];
      }

      const token = await firebaseUser.getIdToken();

      // Upload to backend API with Cloudinary
      const formData = new FormData();
      files.forEach(file => {
        formData.append('files', file);
      });

      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/uploads/multiple`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
        body: formData,
      });

      if (response.ok) {
        const data = await response.json();
        console.log('Upload response:', data); // Debug log
        if (data.success && data.files) {
          // Filter out any invalid URLs and ensure they're all strings
          const validUrls = data.files
            .map((file: any) => file.url)
            .filter((url: any) => url && typeof url === 'string');
          
          console.log('Valid uploaded URLs:', validUrls); // Debug log
          uploadedUrls.push(...validUrls);
          
          toast.success('Images uploaded successfully!', {
            description: `${validUrls.length} image(s) uploaded successfully.`,
            duration: 3000,
          });
        }
      } else {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || 'Upload failed');
      }
      
    } catch (error: any) {
      console.error('Error uploading images:', error);
      
      // Error feedback for image upload
      toast.error('Failed to upload images', {
        description: error.message || 'There was an error uploading your images. Please try again.',
        duration: 5000,
      });
    } finally {
      setUploadingImages(false);
    }

    return uploadedUrls;
  };

  const handleCreateEvent = () => {
    resetForm();
    setEditingEvent(null);
    setShowCreateForm(true);
  };

  const handleEditEvent = (event: Event) => {
    const existingImages = event.images || [];
    
    setFormData({
      title: event.title || "",
      description: event.description || "",
      eventType: event.eventType || "",
      startDate: event.startDate ? new Date(event.startDate).toISOString().slice(0, 16) : "",
      endDate: event.endDate ? new Date(event.endDate).toISOString().slice(0, 16) : "",
      location: event.location || "",
      address: event.address || "",
      budget: event.budget || 0,
      currency: event.currency || "USD",
      requiredRoles: event.requiredRoles || [],
      tags: event.tags || [],
      maxApplicants: event.maxApplicants || 0,
      isPublic: event.isPublic !== false,
      requirements: event.requirements || "",
      deadlineDate: event.deadlineDate ? new Date(event.deadlineDate).toISOString().slice(0, 16) : "",
      images: existingImages,
    });
    
    // Set existing image URLs for preview (always set, even if empty)
    setImageUrls(existingImages);
    setSelectedImages([]); // Clear any pending uploads
    
    console.log('Loading event for editing:', {
      eventTitle: event.title,
      existingImages,
      imageUrls: existingImages
    });
    
    // Informational toast for editing
    toast.info('Event loaded for editing', {
      description: `"${event.title}" is now ready to edit${existingImages.length > 0 ? ` (${existingImages.length} existing images)` : ''}.`,
      duration: 3000,
    });

    setEditingEvent(event);
    setShowCreateForm(true);
  };  const handleDeleteEvent = async (eventId: string) => {
    if (!confirm('Are you sure you want to delete this event?')) return;
    
    try {
      const { getAuth } = await import('firebase/auth');
      const auth = getAuth();
      const firebaseUser = auth.currentUser;
      
      if (!firebaseUser) {
        setError('You must be logged in to delete events.');
        return;
      }

      const token = await firebaseUser.getIdToken();
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/events/${eventId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
      });
      
      if (!res.ok) {
        const errorData = await res.json().catch(() => ({ message: 'Unknown error' }));
        const errorMessage = errorData.message || `Failed to delete event (${res.status})`;
        
        toast.error('Failed to delete event', {
          description: errorMessage,
          duration: 5000,
        });
        
        throw new Error(errorMessage);
      }
      
      // Find the event title for success message
      const deletedEvent = events.find(e => e.id === eventId);
      const eventTitle = deletedEvent?.title || 'Event';
      
      // Success feedback
      toast.success('Event deleted successfully!', {
        description: `"${eventTitle}" has been permanently deleted.`,
        duration: 4000,
      });
      
      setEvents(events.filter(e => e.id !== eventId));
      setError(null);
      fetchStats(); // Refresh stats
      
      // If the deleted event was selected, clear the selection
      if (selectedEvent?.id === eventId) {
        setSelectedEvent(null);
        setActiveTab('events');
      }
    } catch (err: any) {
      const errorMessage = err.message || 'Failed to delete event';
      
      // Show error toast if not already shown
      if (!err.message?.includes('Failed to delete event')) {
        toast.error('Failed to delete event', {
          description: errorMessage,
          duration: 5000,
        });
      }
      
      setError(errorMessage);
    }
  };

  const handleSubmitForm = async () => {
    setIsSubmitting(true);
    try {
      const { getAuth } = await import('firebase/auth');
      const auth = getAuth();
      const firebaseUser = auth.currentUser;
      
      if (!firebaseUser) {
        throw new Error('No authenticated user found');
      }
      
      const token = await firebaseUser.getIdToken();
      
      // Upload images and filter out any null/undefined values
      let imageUrls = (formData.images || []).filter(Boolean); // Remove any null/undefined
      
      // Only add new images if there are any
      if (selectedImages.length > 0) {
        // Upload images using Cloudinary backend API - no size issues
        const uploadedUrls = await uploadImages(selectedImages);
        const validUploadedUrls = uploadedUrls.filter(Boolean); // Remove any null/undefined
        imageUrls = [...imageUrls, ...validUploadedUrls];
      }
      
      const url = editingEvent 
        ? `${process.env.NEXT_PUBLIC_API_URL}/api/events/${editingEvent.id}`
        : `${process.env.NEXT_PUBLIC_API_URL}/api/events`;
      
      const method = editingEvent ? 'PUT' : 'POST';
      
      // Create the update data with Cloudinary URLs (very small payload)
      const updateData = {
        ...formData,
        images: imageUrls.filter(Boolean), // Ensure no null values
        startDate: new Date(formData.startDate).toISOString(),
        endDate: new Date(formData.endDate).toISOString(),
        deadlineDate: formData.deadlineDate ? new Date(formData.deadlineDate).toISOString() : null,
      };
      
      console.log('Submitting event with images:', {
        imageUrls,
        filteredImages: updateData.images,
        selectedImagesCount: selectedImages.length,
        formDataImages: formData.images
      }); // Debug log
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        },
        body: JSON.stringify(updateData)
      });

      if (response.ok) {
        const actionText = editingEvent ? 'updated' : 'created';
        const eventTitle = formData.title || 'Event';
        const imageCount = imageUrls.length;
        
        // Enhanced success feedback with details
        toast.success(`Event ${actionText} successfully!`, {
          description: `"${eventTitle}" has been ${actionText} and saved${imageCount > 0 ? ` with ${imageCount} image${imageCount !== 1 ? 's' : ''}` : ''}.`,
          duration: 4000,
        });

        setShowCreateForm(false);
        setEditingEvent(null);
        resetForm();
        fetchEvents();
        fetchStats();
        setError(null);
      } else {
        const errorData = await response.json().catch(() => ({}));
        let errorMessage = errorData.message || 'Failed to save event';
        
        // Handle specific error cases
        if (response.status === 413 || errorMessage.includes('too large') || errorMessage.includes('entity too large')) {
          errorMessage = 'Request too large. Please reduce image sizes or remove some images.';
          toast.error('Upload too large', {
            description: 'Your event data is too large. Try reducing image sizes or removing some images.',
            duration: 6000,
          });
        } else {
          // Error feedback for other errors
          toast.error(`Failed to ${editingEvent ? 'update' : 'create'} event`, {
            description: errorMessage,
            duration: 5000,
          });
        }
        
        throw new Error(errorMessage);
      }
    } catch (error: any) {
      const errorMessage = error.message || 'Failed to save event';
      
      // Catch any other errors and show toast
      if (!error.message?.includes('Failed to')) {
        toast.error(`Failed to ${editingEvent ? 'update' : 'create'} event`, {
          description: errorMessage,
          duration: 5000,
        });
      }
      
      setError(errorMessage);
    } finally {
      setIsSubmitting(false);
    }
  };

  const toggleRequiredRole = (role: string) => {
    setFormData(prev => ({
      ...prev,
      requiredRoles: prev.requiredRoles.includes(role)
        ? prev.requiredRoles.filter(r => r !== role)
        : [...prev.requiredRoles, role]
    }));
  };

  // Calendar and event detail functions
  const handleEventSelect = async (eventId: string) => {
    try {
      const eventData = await eventsApi.getEventById(eventId);
      // Cast to Event type with proper _count field
      const event = {
        ...eventData,
        _count: (eventData as any)._count || { event_applications: 0, bookings: 0 }
      } as Event;
      setSelectedEvent(event);
    } catch (error) {
      console.error('Failed to fetch event details:', error);
      
      // Error feedback for event selection
      toast.error('Failed to load event details', {
        description: 'Unable to load the selected event. Please try again.',
        duration: 4000,
      });
    }
  };

  const getEventsForDate = (date: Date) => {
    return events.filter(event => {
      const eventDate = new Date(event.startDate);
      return eventDate.toDateString() === date.toDateString();
    });
  };

  const formatEventForCard = (event: Event) => {
    return {
      id: Number(event.id),
      title: event.title,
      description: event.description,
      date: new Date(event.startDate).toLocaleDateString(),
      time: new Date(event.startDate).toLocaleTimeString(),
      location: event.location,
      category: event.eventType,
      attendees: event._count?.event_applications || 0,
      price: event.budget || 0,
      image: event.images?.[0] || '/images/default-event.jpg',
      organizer: {
        name: 'Your Event',
        avatar: '/images/default-avatar.jpg',
        rating: 4.5
      },
      tags: event.tags || [],
      isFeatured: false
    };
  };

  const generateCalendarDays = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const startCalendar = new Date(firstDay);
    startCalendar.setDate(startCalendar.getDate() - firstDay.getDay());
    
    const days = [];
    const current = new Date(startCalendar);
    
    for (let i = 0; i < 42; i++) {
      days.push(new Date(current));
      current.setDate(current.getDate() + 1);
    }
    
    return days;
  };

  const navigateCalendar = (direction: 'prev' | 'next') => {
    const newDate = new Date(currentDate);
    if (calendarView === 'month') {
      newDate.setMonth(newDate.getMonth() + (direction === 'next' ? 1 : -1));
    } else if (calendarView === 'week') {
      newDate.setDate(newDate.getDate() + (direction === 'next' ? 7 : -7));
    } else {
      newDate.setDate(newDate.getDate() + (direction === 'next' ? 1 : -1));
    }
    setCurrentDate(newDate);
  };

  const filteredEvents = events.filter(event => {
    const matchesSearch = event.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         event.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesStatus = statusFilter === "ALL" || event.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const formatCurrency = (amount: number, currency: string) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: currency || 'USD'
    }).format(amount);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'PUBLISHED': return 'bg-green-100 text-green-800';
      case 'DRAFT': return 'bg-gray-100 text-gray-800';
      case 'IN_PROGRESS': return 'bg-blue-100 text-blue-800';
      case 'COMPLETED': return 'bg-purple-100 text-purple-800';
      case 'CANCELLED': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (authLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading dashboard...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return null;
  }

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <SiteHeader />
        <div className="flex flex-1 flex-col">
          <div className="@container/main flex flex-1 flex-col gap-4 p-4 md:p-6">
            
            {/* Header Section with Action Buttons */}
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
              <div>
                <h1 className="text-3xl font-bold tracking-tight">Event Management</h1>
                <p className="text-muted-foreground">Manage all your events and track performance</p>
              </div>
              <div className="flex flex-col sm:flex-row gap-3">
                <Button onClick={handleCreateEvent} size="lg" className="w-full sm:w-auto bg-gradient-to-r from-orange-600 to-orange-700 hover:from-orange-700 hover:to-orange-800 text-white shadow-lg hover:shadow-xl transition-all duration-300">
                  <Plus className="w-5 h-5 mr-2" />
                  Create Event
                </Button>
                <Button variant="outline" size="lg" className="w-full sm:w-auto">
                  <Calendar className="w-5 h-5 mr-2" />
                  View Calendar
                </Button>
              </div>
            </div>

            {/* Error Display */}
            {error && (
              <div className="bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-lg mb-6">
                <div className="flex items-center">
                  <AlertCircle className="h-4 w-4 mr-2" />
                  {error}
                </div>
              </div>
            )}

            <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
              <TabsList className="grid w-full grid-cols-5">
                <TabsTrigger value="overview" className="gap-2">
                  <BarChart3 className="h-4 w-4" />
                  Overview
                </TabsTrigger>
                <TabsTrigger value="events" className="gap-2">
                  <Calendar className="h-4 w-4" />
                  My Events
                </TabsTrigger>
                <TabsTrigger value="calendar" className="gap-2">
                  <CalendarDays className="h-4 w-4" />
                  Calendar
                </TabsTrigger>
                <TabsTrigger value="details" className="gap-2" disabled={!selectedEvent}>
                  <Eye className="h-4 w-4" />
                  Event Details
                </TabsTrigger>
                <TabsTrigger value="analytics" className="gap-2">
                  <TrendingUp className="h-4 w-4" />
                  Analytics
                </TabsTrigger>
              </TabsList>

              {/* Overview Tab */}
              <TabsContent value="overview" className="space-y-6">
                {/* Bento Grid Layout - Stats Cards */}
                <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4 md:gap-6 auto-rows-min">
                  
                  {/* Total Events */}
                  <div className="md:col-span-1 lg:col-span-1 bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950/50 dark:to-purple-900/50 rounded-xl border p-6">
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <p className="text-sm text-muted-foreground">Total Events</p>
                        <Calendar className="h-4 w-4 text-purple-600" />
                      </div>
                      <h2 className="text-2xl font-bold text-purple-900 dark:text-purple-100">{stats.totalEvents || 0}</h2>
                      <div className="mt-4">
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-green-100 text-green-700">
                          <svg className="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M5.293 9.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 7.414V15a1 1 0 11-2 0V7.414L6.707 9.707a1 1 0 01-1.414 0z" clipRule="evenodd" />
                          </svg>
                          All time
                        </span>
                      </div>
                    </div>
                    <p className="text-sm text-muted-foreground mt-4">Events created</p>
                  </div>
                  
                  {/* Active Events */}
                  <div className="md:col-span-1 lg:col-span-1 bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/50 dark:to-blue-900/50 rounded-xl border p-6">
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <p className="text-sm text-muted-foreground">Active Events</p>
                        <Activity className="h-4 w-4 text-blue-600" />
                      </div>
                      <h2 className="text-2xl font-bold text-blue-900 dark:text-blue-100">{stats.activeEvents || 0}</h2>
                      <div className="mt-4">
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-700">
                          Currently running
                        </span>
                      </div>
                    </div>
                    <p className="text-sm text-muted-foreground mt-4">Live events</p>
                  </div>
                  
                  {/* Total Applications */}
                  <div className="md:col-span-1 lg:col-span-1 bg-gradient-to-br from-green-50 to-emerald-100 dark:from-green-950/50 dark:to-emerald-900/50 rounded-xl border p-6">
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <p className="text-sm text-muted-foreground">Applications</p>
                        <Users className="h-4 w-4 text-green-600" />
                      </div>
                      <h2 className="text-2xl font-bold text-green-900 dark:text-green-100">{stats.totalApplications || 0}</h2>
                      <div className="mt-4">
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-green-100 text-green-700">
                          <svg className="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M5.293 9.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 7.414V15a1 1 0 11-2 0V7.414L6.707 9.707a1 1 0 01-1.414 0z" clipRule="evenodd" />
                          </svg>
                          +22.3%
                        </span>
                      </div>
                    </div>
                    <p className="text-sm text-muted-foreground mt-4">From professionals</p>
                  </div>
                  
                  {/* Total Budget */}
                  <div className="md:col-span-1 lg:col-span-1 bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950/50 dark:to-orange-900/50 rounded-xl border p-6">
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <p className="text-sm text-muted-foreground">Total Budget</p>
                        <DollarSign className="h-4 w-4 text-orange-600" />
                      </div>
                      <h2 className="text-2xl font-bold text-orange-900 dark:text-orange-100">${(stats.totalBudget || 0).toLocaleString()}</h2>
                      <div className="mt-4">
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-orange-100 text-orange-700">
                          Across all events
                        </span>
                      </div>
                    </div>
                    <p className="text-sm text-muted-foreground mt-4">Budget allocated</p>
                  </div>
                </div>

                {/* Recent Events Section */}
                <div className="md:col-span-2 lg:col-span-2 bg-white dark:bg-gray-950 rounded-xl border p-6">
                  <div className="flex items-center justify-between mb-6">
                    <div>
                      <h3 className="text-lg font-semibold">Recent Events</h3>
                      <p className="text-sm text-muted-foreground">Your latest events and their status</p>
                    </div>
                    <Button variant="outline" size="sm" onClick={() => setActiveTab("events")}>
                      View All
                    </Button>
                  </div>
                  
                  {loading ? (
                    <div className="flex items-center justify-center h-32">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                    </div>
                  ) : events.length === 0 ? (
                    <div className="text-center py-12">
                      <CalendarDays className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
                      <h4 className="text-lg font-medium mb-2">No events yet</h4>
                      <p className="text-muted-foreground mb-4">Create your first event to get started</p>
                      <Button onClick={handleCreateEvent}>Create Event</Button>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {events.slice(0, 5).map((event) => (
                        <div key={event.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-900 transition-colors">
                          <div className="flex-1">
                            <h4 className="font-medium">{event.title}</h4>
                            <p className="text-sm text-muted-foreground">{event.location}</p>
                            <div className="flex items-center gap-2 mt-2">
                              <Badge className={getStatusColor(event.status)}>
                                {event.status}
                              </Badge>
                              <span className="text-sm text-muted-foreground">
                                {event._count.event_applications} applications
                              </span>
                              <span className="text-sm text-muted-foreground">
                                {new Date(event.startDate).toLocaleDateString()}
                              </span>
                            </div>
                          </div>
                          <div className="flex gap-2">
                            <Button variant="outline" size="sm" onClick={() => handleEditEvent(event)}>
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button 
                              variant="outline" 
                              size="sm"
                              onClick={() => {
                                handleEventSelect(event.id);
                                setActiveTab('details');
                              }}
                            >
                              <Eye className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </TabsContent>

              {/* Events Tab */}
              <TabsContent value="events" className="space-y-6">
                {/* Search and Filters */}
                <div className="flex flex-col sm:flex-row gap-4">
                  <div className="flex-1 relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                    <Input
                      placeholder="Search events..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                  <Select value={statusFilter} onValueChange={setStatusFilter}>
                    <SelectTrigger className="w-full sm:w-40">
                      <SelectValue placeholder="Status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ALL">All Status</SelectItem>
                      <SelectItem value="DRAFT">Draft</SelectItem>
                      <SelectItem value="PUBLISHED">Published</SelectItem>
                      <SelectItem value="IN_PROGRESS">In Progress</SelectItem>
                      <SelectItem value="COMPLETED">Completed</SelectItem>
                      <SelectItem value="CANCELLED">Cancelled</SelectItem>
                    </SelectContent>
                  </Select>
                  <div className="flex gap-2">
                    <Button
                      variant={viewMode === "grid" ? "default" : "outline"}
                      size="sm"
                      onClick={() => setViewMode("grid")}
                    >
                      <Grid className="h-4 w-4" />
                    </Button>
                    <Button
                      variant={viewMode === "list" ? "default" : "outline"}
                      size="sm"
                      onClick={() => setViewMode("list")}
                    >
                      <List className="h-4 w-4" />
                    </Button>
                  </div>
                </div>

                {/* Events Grid/List */}
                {loading ? (
                  <div className="flex items-center justify-center h-64">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
                  </div>
                ) : filteredEvents.length === 0 ? (
                  <div className="text-center py-12">
                    <Calendar className="mx-auto h-16 w-16 text-muted-foreground mb-4" />
                    <h3 className="text-xl font-medium mb-2">No events found</h3>
                    <p className="text-muted-foreground mb-6">
                      {searchQuery || statusFilter !== "ALL" 
                        ? "Try adjusting your search or filters"
                        : "Create your first event to get started"
                      }
                    </p>
                    <Button onClick={handleCreateEvent}>Create Event</Button>
                  </div>
                ) : (
                  <div className={viewMode === "grid" 
                    ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" 
                    : "space-y-4"
                  }>
                    {filteredEvents.map((event) => (
                      <Card key={event.id} className="hover:shadow-lg transition-shadow">
                        <CardHeader>
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <CardTitle className="text-lg">{event.title}</CardTitle>
                              <CardDescription className="mt-1">
                                {event.description.length > 100 
                                  ? `${event.description.substring(0, 100)}...`
                                  : event.description
                                }
                              </CardDescription>
                            </div>
                            <Badge className={getStatusColor(event.status)}>
                              {event.status}
                            </Badge>
                          </div>
                        </CardHeader>
                        <CardContent className="space-y-4">
                          <div className="space-y-2 text-sm">
                            <div className="flex items-center gap-2">
                              <Calendar className="h-4 w-4 text-muted-foreground" />
                              <span>{new Date(event.startDate).toLocaleDateString()}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <MapPin className="h-4 w-4 text-muted-foreground" />
                              <span>{event.location}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <DollarSign className="h-4 w-4 text-muted-foreground" />
                              <span>{formatCurrency(event.budget || 0, event.currency)}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Users className="h-4 w-4 text-muted-foreground" />
                              <span>{event._count.event_applications} applications</span>
                            </div>
                          </div>
                          
                          {event.requiredRoles && event.requiredRoles.length > 0 && (
                            <div className="flex flex-wrap gap-1">
                              {event.requiredRoles.slice(0, 3).map((role) => (
                                <Badge key={role} variant="secondary" className="text-xs">
                                  {role}
                                </Badge>
                              ))}
                              {event.requiredRoles.length > 3 && (
                                <Badge variant="secondary" className="text-xs">
                                  +{event.requiredRoles.length - 3} more
                                </Badge>
                              )}
                            </div>
                          )}
                        </CardContent>
                        <CardFooter className="flex gap-2">
                          <Button 
                            variant="outline" 
                            size="sm" 
                            className="flex-1"
                            onClick={() => {
                              handleEventSelect(event.id);
                              setActiveTab('details');
                            }}
                          >
                            <Eye className="h-4 w-4 mr-2" />
                            View
                          </Button>
                          <Button 
                            variant="outline" 
                            size="sm" 
                            onClick={() => handleEditEvent(event)}
                            className="flex-1"
                          >
                            <Edit className="h-4 w-4 mr-2" />
                            Edit
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            className="text-red-600 hover:text-red-700"
                            onClick={() => handleDeleteEvent(event.id)}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </CardFooter>
                      </Card>
                    ))}
                  </div>
                )}
              </TabsContent>

              {/* Calendar Tab */}
              <TabsContent value="calendar" className="space-y-6">
                <div className="space-y-4">
                  {/* Calendar Header */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4">
                      <h2 className="text-xl font-semibold">
                        {currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
                      </h2>
                      <div className="flex gap-1">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => navigateCalendar('prev')}
                        >
                          ←
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setCurrentDate(new Date())}
                        >
                          Today
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => navigateCalendar('next')}
                        >
                          →
                        </Button>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Button
                        variant={calendarView === 'month' ? 'default' : 'outline'}
                        size="sm"
                        onClick={() => setCalendarView('month')}
                      >
                        Month
                      </Button>
                      <Button
                        variant={calendarView === 'week' ? 'default' : 'outline'}
                        size="sm"
                        onClick={() => setCalendarView('week')}
                      >
                        Week
                      </Button>
                    </div>
                  </div>

                  {/* Calendar Grid */}
                  <Card>
                    <CardContent className="p-4">
                      {/* Day Headers */}
                      <div className="grid grid-cols-7 gap-1 mb-2">
                        {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
                          <div key={day} className="p-2 text-center text-sm font-medium text-muted-foreground">
                            {day}
                          </div>
                        ))}
                      </div>
                      
                      {/* Calendar Days */}
                      <div className="grid grid-cols-7 gap-1">
                        {generateCalendarDays().map((date, index) => {
                          const dayEvents = getEventsForDate(date);
                          const isCurrentMonth = date.getMonth() === currentDate.getMonth();
                          const isToday = date.toDateString() === new Date().toDateString();
                          
                          return (
                            <div
                              key={index}
                              className={`
                                min-h-[100px] p-2 border rounded-lg transition-colors cursor-pointer
                                ${isCurrentMonth ? 'bg-background' : 'bg-muted/50'}
                                ${isToday ? 'ring-2 ring-primary' : ''}
                                hover:bg-muted/80
                              `}
                            >
                              <div className={`text-sm font-medium mb-1 ${isCurrentMonth ? '' : 'text-muted-foreground'}`}>
                                {date.getDate()}
                              </div>
                              <div className="space-y-1">
                                {dayEvents.slice(0, 2).map((event) => (
                                  <div
                                    key={event.id}
                                    className="text-xs p-1 bg-primary/10 text-primary rounded cursor-pointer hover:bg-primary/20"
                                    onClick={() => {
                                      handleEventSelect(event.id);
                                      setActiveTab('details');
                                    }}
                                  >
                                    {event.title.length > 15 ? `${event.title.substring(0, 15)}...` : event.title}
                                  </div>
                                ))}
                                {dayEvents.length > 2 && (
                                  <div className="text-xs text-muted-foreground">
                                    +{dayEvents.length - 2} more
                                  </div>
                                )}
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>

              {/* Event Details Tab */}
              <TabsContent value="details" className="space-y-6">
                {selectedEvent ? (
                  <div className="space-y-6">
                    <div className="flex items-center gap-4">
                      <Button
                        variant="outline"
                        onClick={() => setActiveTab('events')}
                      >
                        ← Back to Events
                      </Button>
                      <h2 className="text-2xl font-bold">Event Details</h2>
                    </div>
                    
                    <div className="max-w-3xl">
                      <EventCard event={formatEventForCard(selectedEvent)} />
                    </div>

                    {/* Additional Event Information */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <Card>
                        <CardHeader>
                          <CardTitle>Event Information</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                          <div>
                            <Label className="text-sm font-medium">Event Type</Label>
                            <p className="text-sm text-muted-foreground">{selectedEvent.eventType}</p>
                          </div>
                          <div>
                            <Label className="text-sm font-medium">Status</Label>
                            <Badge className={getStatusColor(selectedEvent.status)}>
                              {selectedEvent.status}
                            </Badge>
                          </div>
                          <div>
                            <Label className="text-sm font-medium">Budget</Label>
                            <p className="text-sm text-muted-foreground">
                              {formatCurrency(selectedEvent.budget || 0, selectedEvent.currency)}
                            </p>
                          </div>
                          <div>
                            <Label className="text-sm font-medium">Max Applicants</Label>
                            <p className="text-sm text-muted-foreground">
                              {selectedEvent.maxApplicants || 'Unlimited'}
                            </p>
                          </div>
                        </CardContent>
                      </Card>

                      <Card>
                        <CardHeader>
                          <CardTitle>Applications & Stats</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                          <div>
                            <Label className="text-sm font-medium">Total Applications</Label>
                            <p className="text-2xl font-bold text-primary">
                              {selectedEvent._count.event_applications}
                            </p>
                          </div>
                          <div>
                            <Label className="text-sm font-medium">Required Roles</Label>
                            <div className="flex flex-wrap gap-1 mt-1">
                              {selectedEvent.requiredRoles?.map(role => (
                                <Badge key={role} variant="secondary" className="text-xs">
                                  {role}
                                </Badge>
                              )) || <span className="text-sm text-muted-foreground">None specified</span>}
                            </div>
                          </div>
                          <div>
                            <Label className="text-sm font-medium">Tags</Label>
                            <div className="flex flex-wrap gap-1 mt-1">
                              {selectedEvent.tags?.map(tag => (
                                <Badge key={tag} variant="outline" className="text-xs">
                                  {tag}
                                </Badge>
                              )) || <span className="text-sm text-muted-foreground">No tags</span>}
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </div>

                    {/* Event Images */}
                    {selectedEvent.images && selectedEvent.images.length > 0 && (
                      <Card>
                        <CardHeader>
                          <CardTitle>Event Images</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            {selectedEvent.images.map((image, index) => (
                              <img
                                key={index}
                                src={image}
                                alt={`Event image ${index + 1}`}
                                className="w-full h-48 object-cover rounded-lg border"
                              />
                            ))}
                          </div>
                        </CardContent>
                      </Card>
                    )}

                    {/* Action Buttons */}
                    <div className="flex gap-4">
                      <Button
                        onClick={() => handleEditEvent(selectedEvent)}
                        className="flex-1 max-w-xs"
                      >
                        <Edit className="h-4 w-4 mr-2" />
                        Edit Event
                      </Button>
                      <Button
                        variant="outline"
                        onClick={() => handleDeleteEvent(selectedEvent.id)}
                        className="text-red-600 hover:text-red-700"
                      >
                        <Trash2 className="h-4 w-4 mr-2" />
                        Delete Event
                      </Button>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-12">
                    <Eye className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
                    <h3 className="text-lg font-medium mb-2">No Event Selected</h3>
                    <p className="text-muted-foreground mb-4">
                      Select an event from the Events or Calendar tab to view its details.
                    </p>
                    <Button onClick={() => setActiveTab('events')}>
                      Go to Events
                    </Button>
                  </div>
                )}
              </TabsContent>

              {/* Analytics Tab */}
              <TabsContent value="analytics" className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <Card>
                    <CardHeader>
                      <CardTitle>Event Performance</CardTitle>
                      <CardDescription>Applications and engagement metrics</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        <div className="text-center py-8 text-muted-foreground">
                          <BarChart3 className="mx-auto h-12 w-12 mb-4" />
                          <p>Analytics coming soon</p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardHeader>
                      <CardTitle>Budget Analysis</CardTitle>
                      <CardDescription>Spending patterns and trends</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        <div className="text-center py-8 text-muted-foreground">
                          <TrendingUp className="mx-auto h-12 w-12 mb-4" />
                          <p>Budget analytics coming soon</p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>
            </Tabs>

          </div>
        </div>
      </SidebarInset>

      {/* Create/Edit Event Dialog */}
      <Dialog open={showCreateForm} onOpenChange={setShowCreateForm}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>
              {editingEvent ? 'Edit Event' : 'Create New Event'}
            </DialogTitle>
            <DialogDescription>
              {editingEvent 
                ? `Update "${editingEvent.title}" event details and settings` 
                : 'Fill in the details to create a new event'}
            </DialogDescription>
          </DialogHeader>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Basic Information */}
            <div className="space-y-4">
              <h3 className="font-medium">Basic Information</h3>
              
              <div>
                <Label htmlFor="title">Event Title</Label>
                <Input
                  id="title"
                  value={formData.title}
                  onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                  placeholder="Enter event title"
                />
              </div>

              <div>
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="Describe your event"
                  rows={4}
                />
              </div>

              <div>
                <Label htmlFor="eventType">Event Type</Label>
                <Select value={formData.eventType} onValueChange={(value) => setFormData(prev => ({ ...prev, eventType: value }))}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select event type" />
                  </SelectTrigger>
                  <SelectContent>
                    {eventTypes.map((type) => (
                      <SelectItem key={type} value={type}>
                        {type}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Date & Location */}
            <div className="space-y-4">
              <h3 className="font-medium">Date & Location</h3>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="startDate">Start Date & Time</Label>
                  <Input
                    id="startDate"
                    type="datetime-local"
                    value={formData.startDate}
                    onChange={(e) => setFormData(prev => ({ ...prev, startDate: e.target.value }))}
                  />
                </div>
                <div>
                  <Label htmlFor="endDate">End Date & Time</Label>
                  <Input
                    id="endDate"
                    type="datetime-local"
                    value={formData.endDate}
                    onChange={(e) => setFormData(prev => ({ ...prev, endDate: e.target.value }))}
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="location">Venue</Label>
                <Input
                  id="location"
                  value={formData.location}
                  onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}
                  placeholder="Event venue"
                />
              </div>

              <div>
                <Label htmlFor="address">Address</Label>
                <Input
                  id="address"
                  value={formData.address}
                  onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}
                  placeholder="Full address"
                />
              </div>
            </div>

            {/* Budget & Requirements */}
            <div className="space-y-4">
              <h3 className="font-medium">Budget & Requirements</h3>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="budget">Budget</Label>
                  <Input
                    id="budget"
                    type="number"
                    value={formData.budget}
                    onChange={(e) => setFormData(prev => ({ ...prev, budget: Number(e.target.value) }))}
                    placeholder="0"
                  />
                </div>
                <div>
                  <Label htmlFor="currency">Currency</Label>
                  <Select value={formData.currency} onValueChange={(value) => setFormData(prev => ({ ...prev, currency: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="USD">USD</SelectItem>
                      <SelectItem value="EUR">EUR</SelectItem>
                      <SelectItem value="GBP">GBP</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div>
                <Label>Required Professionals</Label>
                <div className="grid grid-cols-2 gap-2 mt-2">
                  {professionalCategories.map((category) => (
                    <div key={category.id} className="flex items-center space-x-2">
                      <Checkbox
                        id={category.id}
                        checked={formData.requiredRoles.includes(category.id)}
                        onCheckedChange={() => toggleRequiredRole(category.id)}
                      />
                      <Label htmlFor={category.id} className="text-sm">
                        {category.label}
                      </Label>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Event Images - Enhanced Section */}
            <div className="space-y-6 p-6 border border-border rounded-lg bg-gradient-to-br from-orange-50 to-orange-100/50">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-600 rounded-lg">
                  <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                </div>
                <div>
                  <h3 className="font-semibold text-lg">Event Images</h3>
                  <p className="text-sm text-muted-foreground">Showcase your event with beautiful images</p>
                </div>
              </div>
              
              <div className="space-y-4">
                <div className="relative">
                  <Label htmlFor="eventImages" className="text-base font-medium">Upload Images</Label>
                  <div className="mt-2 border-2 border-dashed border-orange-300 rounded-lg p-6 bg-white/50 hover:bg-white/80 transition-colors cursor-pointer">
                    <Input
                      id="eventImages"
                      type="file"
                      multiple
                      accept="image/*"
                      onChange={handleImageUpload}
                      className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                    />
                    <div className="text-center">
                      <svg className="w-12 h-12 mx-auto text-orange-400 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                      </svg>
                      <p className="text-base font-medium text-gray-900 mb-1">Drop images here or click to browse</p>
                      <p className="text-sm text-gray-500">PNG, JPG, GIF up to 10MB each</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-4 mt-3">
                    <p className="text-xs text-green-600 flex items-center gap-1">
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      Secure Cloudinary Upload
                    </p>
                    <p className="text-xs text-blue-600 flex items-center gap-1">
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                      </svg>
                      Fast CDN Delivery
                    </p>
                  </div>
                </div>

                {/* Upload Progress */}
                {uploadingImages && (
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-center gap-3">
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
                      <span className="text-sm font-medium text-blue-900">Uploading images to Cloudinary...</span>
                    </div>
                  </div>
                )}

                {/* Debug Info (temporary) */}
                <div className="space-y-2 p-4 bg-gray-50 rounded-lg text-xs border">
                  <div className="font-medium text-gray-700 mb-2">Debug Information:</div>
                  <div><strong>Saved Images:</strong> {JSON.stringify(formData.images)}</div>
                  <div><strong>Preview URLs:</strong> {imageUrls.length}</div>
                  <div><strong>New Uploads:</strong> {selectedImages.length}</div>
                  <div><strong>Mode:</strong> {editingEvent ? `Editing "${editingEvent.title}"` : 'Creating new event'}</div>
                </div>
              </div>

              {/* Image Previews */}
              {imageUrls.length > 0 && (
                <div className="space-y-3 mt-6">
                  <div className="flex items-center gap-2">
                    <h4 className="text-base font-semibold">Current Images</h4>
                    <span className="text-xs bg-orange-100 text-orange-700 px-3 py-1 rounded-full font-medium">
                      {imageUrls.length} image{imageUrls.length !== 1 ? 's' : ''}
                    </span>
                  </div>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    {imageUrls.map((url, index) => (
                      <div key={index} className="relative group">
                        <img
                          src={url}
                          alt={`Event image ${index + 1}`}
                          className="w-full h-32 object-cover rounded-lg border-2 border-orange-200 shadow-sm hover:shadow-md transition-shadow"
                        />
                        <button
                          type="button"
                          onClick={() => removeImage(index)}
                          className="absolute top-2 right-2 bg-red-500 hover:bg-red-600 text-white rounded-full w-7 h-7 flex items-center justify-center text-sm opacity-0 group-hover:opacity-100 transition-all duration-200 shadow-lg"
                          title="Remove image"
                        >
                          ×
                        </button>
                        {/* Image status indicator */}
                        <div className="absolute bottom-2 left-2 bg-green-500 text-white text-xs px-2 py-1 rounded-full font-medium shadow-md">
                          {index < (formData.images?.length || 0) ? 'Saved' : 'New'}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
                        {/* Debug info */}
                        <div className="absolute top-1 left-1 bg-black/50 text-white text-xs px-1 py-0.5 rounded">
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* Settings */}
            <div className="space-y-4">
              <h3 className="font-medium">Settings</h3>
              
              <div>
                <Label htmlFor="maxApplicants">Max Applicants</Label>
                <Input
                  id="maxApplicants"
                  type="number"
                  value={formData.maxApplicants}
                  onChange={(e) => setFormData(prev => ({ ...prev, maxApplicants: Number(e.target.value) }))}
                  placeholder="Unlimited"
                />
              </div>

              <div>
                <Label htmlFor="deadlineDate">Application Deadline</Label>
                <Input
                  id="deadlineDate"
                  type="datetime-local"
                  value={formData.deadlineDate}
                  onChange={(e) => setFormData(prev => ({ ...prev, deadlineDate: e.target.value }))}
                />
              </div>

              <div className="flex items-center justify-between p-4 border rounded-lg">
                <div>
                  <Label>Public Event</Label>
                  <p className="text-sm text-muted-foreground">
                    Allow all professionals to see and apply to this event
                  </p>
                </div>
                <Switch
                  checked={formData.isPublic}
                  onCheckedChange={(checked) => setFormData(prev => ({ 
                    ...prev, 
                    isPublic: checked 
                  }))}
                />
              </div>
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setShowCreateForm(false)}>
              Cancel
            </Button>
            <Button onClick={handleSubmitForm} disabled={isSubmitting || uploadingImages}>
              {isSubmitting ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Saving...
                </>
              ) : (
                <>
                  <Save className="h-4 w-4 mr-2" />
                  {editingEvent ? 'Update Event' : 'Create Event'}
                </>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </SidebarProvider>
  );
}
