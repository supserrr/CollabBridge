generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
  engineType      = "binary"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm, pgcrypto]
}

model bookings {
  id                 String            @id @default(dbgenerated("gen_random_uuid()"))
  eventId            String
  eventPlannerId     String
  userId             String
  professionalId     String
  startDate          DateTime
  endDate            DateTime
  rate               Float
  currency           String            @default("USD")
  description        String?
  requirements       String[]          @default([])
  status             BookingStatus     @default(PENDING)
  confirmedAt        DateTime?
  completedAt        DateTime?
  cancelledAt        DateTime?
  cancellationReason String?
  notes              String?
  contract           String?
  metadata           Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now())
  events             events            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  event_planners     event_planners    @relation(fields: [eventPlannerId], references: [id], onDelete: Cascade)
  creative_profiles  creative_profiles @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  users              users             @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments           payments[]
  reviews            reviews[]

  @@index([eventPlannerId])
  @@index([professionalId])
  @@index([startDate])
  @@index([status])
}

model conversations {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  messages  messages[]
  users     users[]    @relation("ConversationParticipants")

  @@index([updatedAt])
}

model creative_profiles {
  id                 String               @id @default(dbgenerated("gen_random_uuid()"))
  userId             String               @unique
  categories         String[]             @default([])
  portfolioImages    String[]             @default([])
  portfolioLinks     String[]             @default([])
  hourlyRate         Float?
  dailyRate          Float?
  experience         String?
  equipment          String?
  skills             String[]             @default([])
  languages          String[]             @default([])
  availableFrom      DateTime?
  availableTo        DateTime?
  workingHours       Json?
  isAvailable        Boolean              @default(true)
  responseTime       Int?
  travelRadius       Int?
  certifications     String[]             @default([])
  awards             String[]             @default([])
  socialMedia        Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  bookings             bookings[]
  users                users                @relation(fields: [userId], references: [id], onDelete: Cascade)
  event_applications   event_applications[]
  reviews              reviews[]
  saved_by_planners    saved_professionals[]

  @@index([categories])
  @@index([hourlyRate])
  @@index([isAvailable])
  @@index([skills])
}

model event_applications {
  id                String            @id @default(dbgenerated("gen_random_uuid()"))
  eventId           String
  userId            String
  professionalId    String
  message           String?
  proposedRate      Float?
  availability      Json?
  portfolio         String[]          @default([])
  status            ApplicationStatus @default(PENDING)
  response          String?
  respondedAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now())
  events            events            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  creative_profiles creative_profiles @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  users             users             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, professionalId])
  @@index([createdAt])
  @@index([status])
}

model event_planners {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()"))
  userId               String                 @unique
  companyName          String?
  website              String?
  taxId                String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now())
  bookings             bookings[]
  users                users                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  events               events[]
  saved_professionals  saved_professionals[]
}

model events {
  id                 String               @id @default(dbgenerated("gen_random_uuid()"))
  eventPlannerId     String
  title              String
  description        String
  eventType          EventType
  startDate          DateTime
  endDate            DateTime
  location           String
  address            String?
  budget             Float?
  currency           String               @default("USD")
  requiredRoles      String[]             @default([])
  tags               String[]             @default([])
  maxApplicants      Int?
  isPublic           Boolean              @default(true)
  isFeatured         Boolean              @default(false)
  status             EventStatus          @default(DRAFT)
  images             String[]             @default([])
  attachments        Json?
  requirements       String?
  contactInfo        Json?
  deadlineDate       DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  creatorId          String
  bookings           bookings[]
  event_applications event_applications[]
  users              users                @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  event_planners     event_planners       @relation(fields: [eventPlannerId], references: [id], onDelete: Cascade)

  @@index([budget])
  @@index([creatorId])
  @@index([eventPlannerId])
  @@index([eventType, status])
  @@index([isFeatured])
  @@index([location])
  @@index([requiredRoles])
  @@index([startDate, endDate])
  @@index([tags])
}

model messages {
  id                                String        @id @default(dbgenerated("gen_random_uuid()"))
  conversationId                    String
  senderId                          String
  recipientId                       String
  content                           String
  messageType                       MessageType   @default(TEXT)
  metadata                          Json?
  isRead                            Boolean       @default(false)
  readAt                            DateTime?
  createdAt                         DateTime      @default(now())
  conversations                     conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  users_messages_recipientIdTousers users         @relation("messages_recipientIdTousers", fields: [recipientId], references: [id], onDelete: Cascade)
  users_messages_senderIdTousers    users         @relation("messages_senderIdTousers", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([createdAt])
  @@index([isRead])
  @@index([recipientId])
  @@index([senderId])
}

model notifications {
  id        String           @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  type      NotificationType
  title     String
  message   String
  metadata  Json?
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  users     users            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId, isRead])
}

model payments {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  bookingId     String
  amount        Float
  currency      String        @default("USD")
  paymentMethod PaymentMethod
  transactionId String?
  status        String        @default("COMPLETED")
  paidAt        DateTime      @default(now())
  metadata      Json?
  createdAt     DateTime      @default(now())
  bookings      bookings      @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([paidAt])
}

model promotions {
  id        String        @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  type      PromotionType
  targetId  String
  amount    Float
  currency  String        @default("USD")
  startDate DateTime
  endDate   DateTime
  isActive  Boolean       @default(true)
  metadata  Json?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
  users     users         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model reviews {
  id                              String             @id @default(dbgenerated("gen_random_uuid()"))
  bookingId                       String
  reviewerId                      String
  revieweeId                      String
  professionalId                  String?
  rating                          Int                @db.SmallInt
  comment                         String
  skills                          String[]           @default([])
  communication                   Int?               @db.SmallInt
  professionalism                 Int?               @db.SmallInt
  quality                         Int?               @db.SmallInt
  createdAt                       DateTime           @default(now())
  updatedAt                       DateTime           @default(now())
  flexibility                     Int?               @db.SmallInt
  isPublic                        Boolean            @default(true)
  punctuality                     Int?               @db.SmallInt
  response                        String?
  bookings                        bookings           @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  creative_profiles               creative_profiles? @relation(fields: [professionalId], references: [id])
  users_reviews_revieweeIdTousers users              @relation("reviews_revieweeIdTousers", fields: [revieweeId], references: [id], onDelete: Cascade)
  users_reviews_reviewerIdTousers users              @relation("reviews_reviewerIdTousers", fields: [reviewerId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([createdAt])
  @@index([isPublic])
  @@index([professionalId])
  @@index([rating])
  @@index([revieweeId])
  @@index([reviewerId])
}

model users {
  id                                   String               @id @default(dbgenerated("gen_random_uuid()"))
  firebaseUid                          String?              @unique
  email                                String               @unique
  password                             String?
  username                             String?              @unique
  name                                 String
  displayName                          String?
  role                                 UserRole
  location                             String?
  bio                                  String?
  avatar                               String?
  phone                                String?
  timezone                             String               @default("UTC")
  language                             String               @default("en")
  isVerified                           Boolean              @default(false)
  isActive                             Boolean              @default(true)
  isPublic                             Boolean              @default(true)
  marketingConsent                     Boolean              @default(false)
  lastActiveAt                         DateTime             @default(now())
  verificationDocs                     Json?
  metadata                             Json?
  createdAt                            DateTime             @default(now())
  updatedAt                            DateTime             @default(now())
  bookings                             bookings[]
  creative_profiles                    creative_profiles?
  event_applications                   event_applications[]
  event_planners                       event_planners?
  events                               events[]
  messages_messages_recipientIdTousers messages[]           @relation("messages_recipientIdTousers")
  messages_messages_senderIdTousers    messages[]           @relation("messages_senderIdTousers")
  notifications                        notifications[]
  portfolioViews                       portfolio_views[]
  projects                             projects[]
  promotions                           promotions[]
  reviews_reviews_revieweeIdTousers    reviews[]            @relation("reviews_revieweeIdTousers")
  reviews_reviews_reviewerIdTousers    reviews[]            @relation("reviews_reviewerIdTousers")
  conversations                        conversations[]      @relation("ConversationParticipants")

  @@index([email])
  @@index([firebaseUid])
  @@index([location])
  @@index([role, isActive])
  @@index([username])
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EventStatus {
  DRAFT
  PUBLISHED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EventType {
  WEDDING
  CORPORATE
  BIRTHDAY
  CONCERT
  CONFERENCE
  OTHER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  BOOKING_REQUEST
}

enum NotificationType {
  BOOKING_REQUEST
  APPLICATION_UPDATE
  REVIEW_RECEIVED
  MESSAGE_RECEIVED
  EVENT_REMINDER
  SYSTEM_ANNOUNCEMENT
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CARD
  PAYPAL
  OTHER
}

enum PromotionType {
  FEATURED_PROFILE
  FEATURED_EVENT
  PREMIUM_LISTING
}

enum ReportReason {
  INAPPROPRIATE
  SPAM
  FALSE_INFORMATION
  HARASSMENT
  OTHER
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum UserRole {
  EVENT_PLANNER
  CREATIVE_PROFESSIONAL
  ADMIN
}

model projects {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  userId      String
  title       String
  description String?
  imageUrl    String?
  projectUrl  String?
  tags        String[] @default([])
  isFeatured  Boolean  @default(false)
  isPublic    Boolean  @default(true)
  viewCount   Int      @default(0)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  users       users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isPublic])
  @@index([isFeatured])
}

model portfolio_views {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  viewerIp  String?
  userAgent String?
  referrer  String?
  viewedAt  DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([viewedAt])
}

model saved_professionals {
  id             String            @id @default(dbgenerated("gen_random_uuid()"))
  eventPlannerId String
  professionalId String
  savedAt        DateTime          @default(now())
  event_planners event_planners    @relation(fields: [eventPlannerId], references: [id], onDelete: Cascade)
  creative_profiles creative_profiles @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@unique([eventPlannerId, professionalId])
  @@index([eventPlannerId])
  @@index([professionalId])
}
